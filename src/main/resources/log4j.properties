# Example log4j configuration file. By default, log4j will look for a
# file named log4j.properties in the classpath. With maven, we put a
# template file in src/main/resources/log4j.properties, and "mvn
# compile" will copy it to target/classes/log4j.properties.

# Edit target/classes/log4j.properties to change values temporarily

# Edit src/main/resources/log4j.properties and run "mvn compile"
# or "mvn test" for longer-term changes (this file is versionned,
# changes are meant to be commited and shared with co-workers).

# By default, show only reasonably serious messages (WARN), and log to
# the console. Change to INFO, DEBUG or TRACE for more messages.
log4j.rootLogger=WARN, CONSOLE

# One can override the log level for a particular package or class
# (e.g. by uncommenting the following lines):
#
#log4j.logger.fr.ensimag.deca.tree.Program=TRACE
#log4j.logger.fr.ensimag.deca.tree.Program=DEBUG

# "appender" is where log messages will go to. This directs messages
# to the console (i.e. standard output)
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender

# Format of log messages ("layout" in log4j's jargon).
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
# Format messages as, e.g.
# INFO  [package.Class.method(FileName.java:42)] - Some log message
# %l is rather costly in performance, but helps debugging.
log4j.appender.CONSOLE.layout.ConversionPattern=%-5p %l - %m%n

# Replace the log4j.rootLogger line above with the following one to
# log to a file instead:
#
#log4j.rootLogger=WARN, FILE
#
# Alternatively, one can log both to a file and to the console:
#
#log4j.rootLogger=WARN, CONSOLE, FILE

log4j.appender.FILE=org.apache.log4j.FileAppender

# Set the name of the file
log4j.appender.FILE.File=decac.log

# Set the append to false: overwrite the file for each execution
log4j.appender.FILE.Append=false

# Same format in log file and on stdout
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%-5p [%l] - %m%n
